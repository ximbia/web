"use strict";(self.webpackChunkweb3_boilerplate=self.webpackChunkweb3_boilerplate||[]).push([[1368],{11368:function(t,r,e){e.r(r),e.d(r,{Marketplace:function(){return y}});var a=e(92609),i=e(18592),s=e(25025),n=e(70332),o=e(8455),c=e(19560),d=e(39707),p=e(28552),h=e(18383),g=e(6321),l=e(81895),u=e(17389);let f=function(t){return t[t.Direct=0]="Direct",t[t.Auction=1]="Auction",t}({});class w{constructor(t,r){(0,a._)(this,"contractWrapper",void 0),(0,a._)(this,"storage",void 0),(0,a._)(this,"createListing",(0,i.d6)((async t=>{(0,i.da)(t);const r=await(0,i.cs)(t.assetContractAddress),e=await(0,i.cs)(t.currencyContractAddress);await(0,i.db)(this.contractWrapper,this.getAddress(),r,t.tokenId,await this.contractWrapper.getSignerAddress());const a=await(0,i.bb)(this.contractWrapper.getProvider(),t.buyoutPricePerToken,e);let s=Math.floor(t.startTimestamp.getTime()/1e3);const n=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;return s<n&&(s=n),i.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createListing",args:[{assetContract:r,tokenId:t.tokenId,buyoutPricePerToken:a,currencyToAccept:(0,i.ba)(e),listingType:f.Direct,quantityToList:t.quantity,reservePricePerToken:a,secondsUntilEndTime:t.listingDurationInSeconds,startTime:c.O$.from(s)}],parse:t=>({id:this.contractWrapper.parseLogs("ListingAdded",t?.logs)[0].args.listingId,receipt:t})})}))),(0,a._)(this,"createListingsBatch",(0,i.d6)((async t=>{const r=await Promise.all(t.map((async t=>(await this.createListing.prepare(t)).encode())));return i.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r],parse:t=>this.contractWrapper.parseLogs("ListingAdded",t?.logs).map((r=>({id:r.args.listingId,receipt:t})))})}))),(0,a._)(this,"makeOffer",(0,i.d6)((async(t,r,e,a,s)=>{if((0,i.b9)(e))throw new Error("You must use the wrapped native token address when making an offer with a native token");const n=await(0,i.bb)(this.contractWrapper.getProvider(),a,e);try{await this.getListing(t)}catch(l){throw console.error("Failed to get listing, err =",l),new Error(`Error getting the listing with id ${t}`)}const o=c.O$.from(r),d=c.O$.from(n).mul(o),p=await this.contractWrapper.getCallOverrides()||{};await(0,i.be)(this.contractWrapper,d,e,p);let h=g.Bz;return s&&(h=c.O$.from(Math.floor(s.getTime()/1e3))),i.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"offer",args:[t,r,e,n,h],overrides:p})}))),(0,a._)(this,"acceptOffer",(0,i.d6)((async(t,r)=>{await this.validateListing(c.O$.from(t));const e=await(0,i.cs)(r),a=await this.contractWrapper.readContract.offers(t,e);return i.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"acceptOffer",args:[t,e,a.currency,a.pricePerToken]})}))),(0,a._)(this,"buyoutListing",(0,i.d6)((async(t,r,e)=>{const a=await this.validateListing(c.O$.from(t)),{valid:s,error:n}=await this.isStillValidListing(a,r);if(!s)throw new Error(`Listing ${t} is no longer valid. ${n}`);const o=e||await this.contractWrapper.getSignerAddress(),d=c.O$.from(r),p=c.O$.from(a.buyoutPrice).mul(d),h=await this.contractWrapper.getCallOverrides()||{};return await(0,i.be)(this.contractWrapper,p,a.currencyContractAddress,h),i.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"buy",args:[t,o,d,a.currencyContractAddress,p],overrides:h})}))),(0,a._)(this,"updateListing",(0,i.d6)((async t=>i.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"updateListing",args:[t.id,t.quantity,t.buyoutPrice,t.buyoutPrice,await(0,i.cs)(t.currencyContractAddress),t.startTimeInSeconds,t.secondsUntilEnd]})))),(0,a._)(this,"cancelListing",(0,i.d6)((async t=>i.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"cancelDirectListing",args:[t]})))),this.contractWrapper=t,this.storage=r}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){const r=await this.contractWrapper.readContract.listings(t);if(r.assetContract===l.d)throw new i.by(this.getAddress(),t.toString());if(r.listingType!==f.Direct)throw new i.bz(this.getAddress(),t.toString(),"Auction","Direct");return await this.mapListing(r)}async getActiveOffer(t,r){await this.validateListing(c.O$.from(t)),(0,u.Z)(p.isAddress(r),"Address must be a valid address");const e=await this.contractWrapper.readContract.offers(t,await(0,i.cs)(r));if(e.offeror!==l.d)return await(0,i.d7)(this.contractWrapper.getProvider(),c.O$.from(t),e)}async validateListing(t){try{return await this.getListing(t)}catch(r){throw console.error(`Error getting the listing with id ${t}`),r}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:c.O$.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await(0,i.bd)(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInSeconds:t.startTime,asset:await(0,i.d8)(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),secondsUntilEnd:t.endTime,sellerAddress:t.tokenOwner,type:f.Direct}}async isStillValidListing(t,r){if(!await(0,i.d9)(this.contractWrapper.getProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,t.sellerAddress))return{valid:!1,error:`Token '${t.tokenId}' from contract '${t.assetContractAddress}' is not approved for transfer`};const e=this.contractWrapper.getProvider(),a=new d.CH(t.assetContractAddress,s,e),c=await a.supportsInterface(i.cB),p=await a.supportsInterface(i.cC);if(c){const r=new d.CH(t.assetContractAddress,n,e);let a;try{a=await r.ownerOf(t.tokenId)}catch(h){}const i=a?.toLowerCase()===t.sellerAddress.toLowerCase();return{valid:i,error:i?void 0:`Seller is not the owner of Token '${t.tokenId}' from contract '${t.assetContractAddress} anymore'`}}if(p){const a=new d.CH(t.assetContractAddress,o,e),i=(await a.balanceOf(t.sellerAddress,t.tokenId)).gte(r||t.quantity);return{valid:i,error:i?void 0:`Seller does not have enough balance of Token '${t.tokenId}' from contract '${t.assetContractAddress} to fulfill the listing`}}return{valid:!1,error:"Contract does not implement ERC 1155 or ERC 721."}}}class m{constructor(t,r){(0,a._)(this,"contractWrapper",void 0),(0,a._)(this,"storage",void 0),(0,a._)(this,"encoder",void 0),(0,a._)(this,"createListing",(0,i.d6)((async t=>{(0,i.da)(t);const r=await(0,i.cs)(t.assetContractAddress),e=await(0,i.cs)(t.currencyContractAddress);await(0,i.db)(this.contractWrapper,this.getAddress(),r,t.tokenId,await this.contractWrapper.getSignerAddress());const a=await(0,i.bb)(this.contractWrapper.getProvider(),t.buyoutPricePerToken,e),s=await(0,i.bb)(this.contractWrapper.getProvider(),t.reservePricePerToken,e);let n=Math.floor(t.startTimestamp.getTime()/1e3);const o=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;return n<o&&(n=o),i.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createListing",args:[{assetContract:r,tokenId:t.tokenId,buyoutPricePerToken:a,currencyToAccept:(0,i.ba)(e),listingType:f.Auction,quantityToList:t.quantity,reservePricePerToken:s,secondsUntilEndTime:t.listingDurationInSeconds,startTime:c.O$.from(n)}],parse:t=>({id:this.contractWrapper.parseLogs("ListingAdded",t?.logs)[0].args.listingId,receipt:t})})}))),(0,a._)(this,"createListingsBatch",(0,i.d6)((async t=>{const r=await Promise.all(t.map((async t=>(await this.createListing.prepare(t)).encode())));return i.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r],parse:t=>this.contractWrapper.parseLogs("ListingAdded",t?.logs).map((r=>({id:r.args.listingId,receipt:t})))})}))),(0,a._)(this,"buyoutListing",(0,i.d6)((async t=>{const r=await this.validateListing(c.O$.from(t)),e=await(0,i.bc)(this.contractWrapper.getProvider(),r.currencyContractAddress);return this.makeBid.prepare(t,h.formatUnits(r.buyoutPrice,e.decimals))}))),(0,a._)(this,"makeBid",(0,i.d6)((async(t,r)=>{const e=await this.validateListing(c.O$.from(t)),a=await(0,i.bb)(this.contractWrapper.getProvider(),r,e.currencyContractAddress);if(a.eq(c.O$.from(0)))throw new Error("Cannot make a bid with 0 value");const s=await this.contractWrapper.readContract.bidBufferBps(),n=await this.getWinningBid(t);if(n){const t=(0,i.dc)(n.pricePerToken,a,s);(0,u.Z)(t,"Bid price is too low based on the current winning bid and the bid buffer")}else{const t=a,r=c.O$.from(e.reservePrice);(0,u.Z)(t.gte(r),"Bid price is too low based on reserve price")}const o=c.O$.from(e.quantity),d=a.mul(o),p=await this.contractWrapper.getCallOverrides()||{};return await(0,i.be)(this.contractWrapper,d,e.currencyContractAddress,p),i.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"offer",args:[t,e.quantity,e.currencyContractAddress,a,g.Bz],overrides:p})}))),(0,a._)(this,"cancelListing",(0,i.d6)((async t=>{const r=await this.validateListing(c.O$.from(t)),e=c.O$.from(Math.floor(Date.now()/1e3)),a=c.O$.from(r.startTimeInEpochSeconds),s=await this.contractWrapper.readContract.winningBid(t);if(e.gt(a)&&s.offeror!==l.d)throw new i.bw(t.toString());return i.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"closeAuction",args:[c.O$.from(t),await this.contractWrapper.getSignerAddress()]})}))),(0,a._)(this,"closeListing",(0,i.d6)((async(t,r)=>{r||(r=await this.contractWrapper.getSignerAddress());const e=await this.validateListing(c.O$.from(t));try{return i.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"closeAuction",args:[c.O$.from(t),r]})}catch(a){throw a.message.includes("cannot close auction before it has ended")?new i.bC(t.toString(),e.endTimeInEpochSeconds.toString()):a}}))),(0,a._)(this,"executeSale",(0,i.d6)((async t=>{const r=await this.validateListing(c.O$.from(t));try{const e=await this.getWinningBid(t);(0,u.Z)(e,"No winning bid found");const a=this.encoder.encode("closeAuction",[t,r.sellerAddress]),s=this.encoder.encode("closeAuction",[t,e.buyerAddress]);return i.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[a,s]})}catch(e){throw e.message.includes("cannot close auction before it has ended")?new i.bC(t.toString(),r.endTimeInEpochSeconds.toString()):e}}))),(0,a._)(this,"updateListing",(0,i.d6)((async t=>i.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"updateListing",args:[t.id,t.quantity,t.reservePrice,t.buyoutPrice,t.currencyContractAddress,t.startTimeInEpochSeconds,t.endTimeInEpochSeconds]})))),this.contractWrapper=t,this.storage=r,this.encoder=new i.af(t)}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){const r=await this.contractWrapper.readContract.listings(t);if(r.listingId.toString()!==t.toString())throw new i.by(this.getAddress(),t.toString());if(r.listingType!==f.Auction)throw new i.bz(this.getAddress(),t.toString(),"Direct","Auction");return await this.mapListing(r)}async getWinningBid(t){await this.validateListing(c.O$.from(t));const r=await this.contractWrapper.readContract.winningBid(t);if(r.offeror!==l.d)return await(0,i.d7)(this.contractWrapper.getProvider(),c.O$.from(t),r)}async getWinner(t){const r=await this.validateListing(c.O$.from(t)),e=await this.contractWrapper.readContract.winningBid(t),a=c.O$.from(Math.floor(Date.now()/1e3)),i=c.O$.from(r.endTimeInEpochSeconds);if(a.gt(i)&&e.offeror!==l.d)return e.offeror;const s=(await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.AuctionClosed())).find((r=>r.args.listingId.eq(c.O$.from(t))));if(!s)throw new Error(`Could not find auction with listingId ${t} in closed auctions`);return s.args.winningBidder}async getBidBufferBps(){return this.contractWrapper.readContract.bidBufferBps()}async getMinimumNextBid(t){const[r,e,a]=await Promise.all([this.getBidBufferBps(),this.getWinningBid(t),await this.validateListing(c.O$.from(t))]),s=e?e.currencyValue.value:a.reservePrice,n=s.add(s.mul(r).div(1e4));return(0,i.bd)(this.contractWrapper.getProvider(),a.currencyContractAddress,n)}async validateListing(t){try{return await this.getListing(t)}catch(r){throw console.error(`Error getting the listing with id ${t}`),r}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:c.O$.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await(0,i.bd)(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInEpochSeconds:t.startTime,asset:await(0,i.d8)(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),reservePriceCurrencyValuePerToken:await(0,i.bd)(this.contractWrapper.getProvider(),t.currency,t.reservePricePerToken),reservePrice:c.O$.from(t.reservePricePerToken),endTimeInEpochSeconds:t.endTime,sellerAddress:t.tokenOwner,type:f.Auction}}}e(64166),e(60862),e(89806),e(72439),e(87962),e(7605);class y{get chainId(){return this._chainId}constructor(t,r,e){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},n=arguments.length>4?arguments[4]:void 0,o=arguments.length>5?arguments[5]:void 0,d=arguments.length>6&&void 0!==arguments[6]?arguments[6]:new i.dd(t,r,n,s);(0,a._)(this,"abi",void 0),(0,a._)(this,"contractWrapper",void 0),(0,a._)(this,"storage",void 0),(0,a._)(this,"encoder",void 0),(0,a._)(this,"events",void 0),(0,a._)(this,"estimator",void 0),(0,a._)(this,"platformFees",void 0),(0,a._)(this,"metadata",void 0),(0,a._)(this,"app",void 0),(0,a._)(this,"roles",void 0),(0,a._)(this,"interceptor",void 0),(0,a._)(this,"direct",void 0),(0,a._)(this,"auction",void 0),(0,a._)(this,"_chainId",void 0),(0,a._)(this,"getAll",this.getAllListings),(0,a._)(this,"buyoutListing",(0,i.d6)((async(t,r,e)=>{const a=await this.contractWrapper.readContract.listings(t);if(a.listingId.toString()!==t.toString())throw new i.by(this.getAddress(),t.toString());switch(a.listingType){case f.Direct:return(0,u.Z)(void 0!==r,"quantityDesired is required when buying out a direct listing"),await this.direct.buyoutListing.prepare(t,r,e);case f.Auction:return await this.auction.buyoutListing.prepare(t);default:throw Error(`Unknown listing type: ${a.listingType}`)}}))),(0,a._)(this,"makeOffer",(0,i.d6)((async(t,r,e)=>{const a=await this.contractWrapper.readContract.listings(t);if(a.listingId.toString()!==t.toString())throw new i.by(this.getAddress(),t.toString());const s=await this.contractWrapper.getChainID();switch(a.listingType){case f.Direct:return(0,u.Z)(e,"quantity is required when making an offer on a direct listing"),await this.direct.makeOffer.prepare(t,e,(0,i.b9)(a.currency)?i.cE[s].wrapped.address:a.currency,r);case f.Auction:return await this.auction.makeBid.prepare(t,r);default:throw Error(`Unknown listing type: ${a.listingType}`)}}))),(0,a._)(this,"setBidBufferBps",(0,i.d6)((async t=>{await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());const r=await this.getTimeBufferInSeconds();return i.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setAuctionBuffers",args:[r,c.O$.from(t)]})}))),(0,a._)(this,"setTimeBufferInSeconds",(0,i.d6)((async t=>{await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());const r=await this.getBidBufferBps();return i.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setAuctionBuffers",args:[c.O$.from(t),r]})}))),(0,a._)(this,"allowListingFromSpecificAssetOnly",(0,i.d6)((async t=>{const r=[];return(await this.roles.get("asset")).includes(l.d)&&r.push(this.encoder.encode("revokeRole",[(0,i.bJ)("asset"),l.d])),r.push(this.encoder.encode("grantRole",[(0,i.bJ)("asset"),t])),i.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r]})}))),(0,a._)(this,"allowListingFromAnyAsset",(0,i.d6)((async()=>{const t=[],r=await this.roles.get("asset");for(const e in r)t.push(this.encoder.encode("revokeRole",[(0,i.bJ)("asset"),e]));return t.push(this.encoder.encode("grantRole",[(0,i.bJ)("asset"),l.d])),i.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[t]})}))),this._chainId=o,this.abi=i.e.parse(n||[]),this.contractWrapper=d,this.storage=e,this.metadata=new i.ag(this.contractWrapper,i.ds,this.storage),this.app=new i.a$(this.contractWrapper,this.metadata,this.storage),this.roles=new i.ah(this.contractWrapper,y.contractRoles),this.encoder=new i.af(this.contractWrapper),this.estimator=new i.aP(this.contractWrapper),this.direct=new w(this.contractWrapper,this.storage),this.auction=new m(this.contractWrapper,this.storage),this.events=new i.aQ(this.contractWrapper),this.platformFees=new i.aS(this.contractWrapper),this.interceptor=new i.aR(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){const r=await this.contractWrapper.readContract.listings(t);if(r.assetContract===l.d)throw new i.by(this.getAddress(),t.toString());switch(r.listingType){case f.Auction:return await this.auction.mapListing(r);case f.Direct:return await this.direct.mapListing(r);default:throw new Error(`Unknown listing type: ${r.listingType}`)}}async getActiveListings(t){const r=await this.getAllListingsNoFilter(!0),e=this.applyFilter(r,t),a=c.O$.from(Math.floor(Date.now()/1e3));return e.filter((t=>t.type===f.Auction&&c.O$.from(t.endTimeInEpochSeconds).gt(a)&&c.O$.from(t.startTimeInEpochSeconds).lte(a)||t.type===f.Direct&&t.quantity>0))}async getAllListings(t){const r=await this.getAllListingsNoFilter(!1);return this.applyFilter(r,t)}async getTotalCount(){return await this.contractWrapper.readContract.totalListings()}async isRestrictedToListerRoleOnly(){return!await this.contractWrapper.readContract.hasRole((0,i.bJ)("lister"),l.d)}async getBidBufferBps(){return this.contractWrapper.readContract.bidBufferBps()}async getTimeBufferInSeconds(){return this.contractWrapper.readContract.timeBuffer()}async getOffers(t){const r=await this.events.getEvents("NewOffer",{order:"desc",filters:{listingId:t}});return await Promise.all(r.map((async r=>await(0,i.d7)(this.contractWrapper.getProvider(),c.O$.from(t),{quantityWanted:r.data.quantityWanted,pricePerToken:r.data.quantityWanted.gt(0)?r.data.totalOfferAmount.div(r.data.quantityWanted):r.data.totalOfferAmount,currency:r.data.currency,offeror:r.data.offeror}))))}async getAllListingsNoFilter(t){return(await Promise.all(Array.from(Array((await this.contractWrapper.readContract.totalListings()).toNumber()).keys()).map((async r=>{let e;try{e=await this.getListing(r)}catch(a){return a instanceof i.by?void 0:void console.warn(`Failed to get listing ${r}' - skipping. Try 'marketplace.getListing(${r})' to get the underlying error.`)}if(e.type===f.Auction)return e;if(t){const{valid:t}=await this.direct.isStillValidListing(e);if(!t)return}return e})))).filter((t=>void 0!==t))}applyFilter(t,r){let e=[...t];const i=c.O$.from(r?.start||0).toNumber(),s=c.O$.from(r?.count||a.c).toNumber();return r&&(r.seller&&(e=e.filter((t=>t.sellerAddress.toString().toLowerCase()===r?.seller?.toString().toLowerCase()))),r.tokenContract&&(e=e.filter((t=>t.assetContractAddress.toString().toLowerCase()===r?.tokenContract?.toString().toLowerCase()))),void 0!==r.tokenId&&(e=e.filter((t=>t.tokenId.toString()===r?.tokenId?.toString()))),e=e.filter(((t,r)=>r>=i)),e=e.slice(0,s)),e}async prepare(t,r,e){return i.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:e})}async call(t,r,e){return this.contractWrapper.call(t,r,e)}}(0,a._)(y,"contractRoles",i.dt)}}]);