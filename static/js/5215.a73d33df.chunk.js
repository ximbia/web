"use strict";(self.webpackChunkweb3_boilerplate=self.webpackChunkweb3_boilerplate||[]).push([[5215],{14051:function(t,e,r){r.d(e,{S:function(){return s}});var a=r(92609),n=r(18592);class s{get chainId(){return this._chainId}constructor(t,e,r){var s=this;(0,a._)(this,"contractWrapper",void 0),(0,a._)(this,"storage",void 0),(0,a._)(this,"erc1155",void 0),(0,a._)(this,"_chainId",void 0),(0,a._)(this,"transfer",(0,n.d6)((async function(t,e,r){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[0];return s.erc1155.transfer.prepare(t,e,r,a)}))),(0,a._)(this,"setApprovalForAll",(0,n.d6)((async(t,e)=>this.erc1155.setApprovalForAll.prepare(t,e)))),(0,a._)(this,"airdrop",(0,n.d6)((async function(t,e){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[0];return s.erc1155.airdrop.prepare(t,e,r)}))),this.contractWrapper=t,this.storage=e,this.erc1155=new n.aK(this.contractWrapper,this.storage,r),this._chainId=r}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){return this.erc1155.get(t)}async totalSupply(t){return this.erc1155.totalSupply(t)}async balanceOf(t,e){return this.erc1155.balanceOf(t,e)}async balance(t){return this.erc1155.balance(t)}async isApproved(t,e){return this.erc1155.isApproved(t,e)}}},69842:function(t,e,r){r.d(e,{h:function(){return s}});var a=r(18592),n=r(49242);async function s(t,e,r){const s=t.getProvider(),o=new a.dd(s,e,n,{}),i=await t.getSignerAddress(),c=t.readContract.address;return(await o.readContract.allowance(i,c)).gte(r)}},5215:function(t,e,r){r.r(e),r.d(e,{Pack:function(){return P}});var a=r(92609),n=r(18592),s=r(14051),o=JSON.parse('[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]'),i=r(27761),c=r(19560),d=r(18383),p=r(81895),u=r(99094),l=r(69842);r(64166),r(60862),r(89806),r(72439),r(87962),r(7605);const h=u.z.object({contractAddress:n.aa}),y=h.extend({quantity:a.A}),w=h.extend({tokenId:n.a7}),g=h.extend({tokenId:n.a7,quantity:n.a7}),m=y.omit({quantity:!0}).extend({quantityPerReward:a.A}),f=w,v=g.omit({quantity:!0}).extend({quantityPerReward:n.a7}),k=(()=>m.extend({totalRewards:n.a7.default("1")}))(),A=f,W=(()=>v.extend({totalRewards:n.a7.default("1")}))(),b=(()=>u.z.object({erc20Rewards:u.z.array(k).default([]),erc721Rewards:u.z.array(A).default([]),erc1155Rewards:u.z.array(W).default([])}))(),R=(()=>b.extend({packMetadata:a.N,rewardsPerPack:n.a7.default("1"),openStartTime:n.ab.default(new Date)}))();class C{constructor(t,e,r,s,o){var d=this;let p=arguments.length>5&&void 0!==arguments[5]?arguments[5]:new n.dd(t,e,i,s);(0,a._)(this,"featureName",n.dD.name),(0,a._)(this,"contractWrapper",void 0),(0,a._)(this,"storage",void 0),(0,a._)(this,"chainId",void 0),(0,a._)(this,"events",void 0),(0,a._)(this,"open",(0,n.d6)((async function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:5e5;return n.aV.fromContractWrapper({contractWrapper:d.contractWrapper,method:"openPack",args:[t,e],overrides:{gasLimit:r},parse:t=>{let e=c.O$.from(0);try{e=d.contractWrapper.parseLogs("PackOpenRequested",t?.logs)[0].args.requestId}catch(r){}return{receipt:t,id:e}}})}))),(0,a._)(this,"claimRewards",(0,n.d6)((async function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:5e5;return n.aV.fromContractWrapper({contractWrapper:d.contractWrapper,method:"claimRewards",args:[],overrides:{gasLimit:t},parse:async t=>{const e=d.contractWrapper.parseLogs("PackOpened",t?.logs);if(0===e.length)throw new Error("PackOpened event not found");const r=e[0].args.rewardUnitsDistributed;return await d.parseRewards(r)}})}))),this.contractWrapper=p,this.storage=r,this.chainId=o,this.events=new n.aQ(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async parseRewards(t){const e=[],r=[],a=[];for(const s of t)switch(s.tokenType){case 0:{const t=await(0,n.bc)(this.contractWrapper.getProvider(),s.assetContract);e.push({contractAddress:s.assetContract,quantityPerReward:d.formatUnits(s.totalAmount,t.decimals).toString()});break}case 1:r.push({contractAddress:s.assetContract,tokenId:s.tokenId.toString()});break;case 2:a.push({contractAddress:s.assetContract,tokenId:s.tokenId.toString(),quantityPerReward:s.totalAmount.toString()})}return{erc20Rewards:e,erc721Rewards:r,erc1155Rewards:a}}async addPackOpenEventListener(t){return this.events.addEventListener("PackOpened",(async e=>{t(e.data.packId.toString(),e.data.opener,await this.parseRewards(e.data.rewardUnitsDistributed))}))}async canClaimRewards(t){const e=await(0,n.cs)(t||await this.contractWrapper.getSignerAddress());return await this.contractWrapper.readContract.canClaimRewards(e)}async openAndClaim(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:5e5;const a=await this.contractWrapper.sendTransaction("openPackAndClaimRewards",[t,e,r],{gasLimit:c.O$.from(5e5)});let n=c.O$.from(0);try{n=this.contractWrapper.parseLogs("PackOpenRequested",a?.logs)[0].args.requestId}catch(s){}return{receipt:a,id:n}}async getLinkBalance(){return this.getLinkContract().balanceOf(this.contractWrapper.readContract.address)}async transferLink(t){await this.getLinkContract().transfer(this.contractWrapper.readContract.address,t)}getLinkContract(){const t=n.cG[this.chainId];if(!t)throw new Error(`No LINK token address found for chainId ${this.chainId}`);const e=new n.dd(this.contractWrapper.getSignerOrProvider(),t,o,this.contractWrapper.options);return new n.at(e,this.storage,this.chainId)}}class P extends s.S{get vrf(){return(0,n.c0)(this._vrf,n.dD)}constructor(t,e,r){var s;let o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=arguments.length>4?arguments[4]:void 0,c=arguments.length>5?arguments[5]:void 0;super(arguments.length>6&&void 0!==arguments[6]?arguments[6]:new n.dd(t,e,i,o.gasless&&"openzeppelin"in o.gasless?{...o,gasless:{...o.gasless,openzeppelin:{...o.gasless.openzeppelin,useEOAForwarder:!0}}}:o),r,c),s=this,(0,a._)(this,"abi",void 0),(0,a._)(this,"metadata",void 0),(0,a._)(this,"app",void 0),(0,a._)(this,"roles",void 0),(0,a._)(this,"encoder",void 0),(0,a._)(this,"events",void 0),(0,a._)(this,"estimator",void 0),(0,a._)(this,"royalties",void 0),(0,a._)(this,"interceptor",void 0),(0,a._)(this,"owner",void 0),(0,a._)(this,"_vrf",void 0),(0,a._)(this,"create",(0,n.d6)((async t=>{const e=await this.contractWrapper.getSignerAddress();return this.createTo.prepare(e,t)}))),(0,a._)(this,"addPackContents",(0,n.d6)((async(t,e)=>{const r=await this.contractWrapper.getSignerAddress(),a=await b.parseAsync(e),{contents:s,numOfRewardUnits:o}=await this.toPackContentArgs(a);return n.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"addPackContents",args:[t,s,o,r],parse:t=>{const e=this.contractWrapper.parseLogs("PackUpdated",t?.logs);if(0===e.length)throw new Error("PackUpdated event not found");const r=e[0].args.packId;return{id:r,receipt:t,data:()=>this.erc1155.get(r)}}})}))),(0,a._)(this,"createTo",(0,n.d6)((async(t,e)=>{const r=await(0,n.dz)(e.packMetadata,this.storage),a=await R.parseAsync(e),{erc20Rewards:s,erc721Rewards:o,erc1155Rewards:i}=a,c={erc20Rewards:s,erc721Rewards:o,erc1155Rewards:i},{contents:d,numOfRewardUnits:p}=await this.toPackContentArgs(c);return n.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createPack",args:[d,p,r,a.openStartTime,a.rewardsPerPack,await(0,n.cs)(t)],parse:t=>{const e=this.contractWrapper.parseLogs("PackCreated",t?.logs);if(0===e.length)throw new Error("PackCreated event not found");const r=e[0].args.packId;return{id:r,receipt:t,data:()=>this.erc1155.get(r)}}})}))),(0,a._)(this,"open",(0,n.d6)((async function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:5e5;if(s._vrf)throw new Error("This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead");return n.aV.fromContractWrapper({contractWrapper:s.contractWrapper,method:"openPack",args:[t,e],overrides:{gasLimit:r},parse:async t=>{const e=s.contractWrapper.parseLogs("PackOpened",t?.logs);if(0===e.length)throw new Error("PackOpened event not found");const r=e[0].args.rewardUnitsDistributed,a=[],o=[],i=[];for(const c of r)switch(c.tokenType){case 0:{const t=await(0,n.bc)(s.contractWrapper.getProvider(),c.assetContract);a.push({contractAddress:c.assetContract,quantityPerReward:d.formatUnits(c.totalAmount,t.decimals).toString()});break}case 1:o.push({contractAddress:c.assetContract,tokenId:c.tokenId.toString()});break;case 2:i.push({contractAddress:c.assetContract,tokenId:c.tokenId.toString(),quantityPerReward:c.totalAmount.toString()})}return{erc20Rewards:a,erc721Rewards:o,erc1155Rewards:i}}})}))),this.abi=n.e.parse(i||[]),this.metadata=new n.ag(this.contractWrapper,n.dE,this.storage),this.app=new n.a$(this.contractWrapper,this.metadata,this.storage),this.roles=new n.ah(this.contractWrapper,P.contractRoles),this.royalties=new n.ai(this.contractWrapper,this.metadata),this.encoder=new n.af(this.contractWrapper),this.estimator=new n.aP(this.contractWrapper),this.events=new n.aQ(this.contractWrapper),this.interceptor=new n.aR(this.contractWrapper),this.owner=new n.aU(this.contractWrapper),this._vrf=this.detectVrf()}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t),this._vrf?.onNetworkUpdated(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){return this.erc1155.get(t)}async getAll(t){return this.erc1155.getAll(t)}async getOwned(t){return this.erc1155.getOwned(t)}async getTotalCount(){return this.erc1155.totalCount()}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole((0,n.bJ)("transfer"),p.d)}async getPackContents(t){const{contents:e,perUnitAmounts:r}=await this.contractWrapper.readContract.getPackContents(t),a=[],s=[],o=[];for(let i=0;i<e.length;i++){const t=e[i],p=r[i];switch(t.tokenType){case 0:{const e=await(0,n.bc)(this.contractWrapper.getProvider(),t.assetContract),r=d.formatUnits(p,e.decimals),s=d.formatUnits(c.O$.from(t.totalAmount).div(p),e.decimals);a.push({contractAddress:t.assetContract,quantityPerReward:r,totalRewards:s});break}case 1:s.push({contractAddress:t.assetContract,tokenId:t.tokenId.toString()});break;case 2:o.push({contractAddress:t.assetContract,tokenId:t.tokenId.toString(),quantityPerReward:p.toString(),totalRewards:c.O$.from(t.totalAmount).div(p).toString()})}}return{erc20Rewards:a,erc721Rewards:s,erc1155Rewards:o}}async toPackContentArgs(t){const e=[],r=[],{erc20Rewards:a,erc721Rewards:s,erc1155Rewards:o}=t,i=this.contractWrapper.getProvider(),d=await this.contractWrapper.getSignerAddress();for(const c of a){const t=(await(0,n.bb)(i,c.quantityPerReward,c.contractAddress)).mul(c.totalRewards);if(!await(0,l.h)(this.contractWrapper,c.contractAddress,t))throw new Error(`ERC20 token with contract address "${c.contractAddress}" does not have enough allowance to transfer.\n\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\n\nawait sdk.getToken("${c.contractAddress}").setAllowance("${this.getAddress()}", ${t});\n\n`);r.push(c.totalRewards),e.push({assetContract:c.contractAddress,tokenType:0,totalAmount:t,tokenId:0})}for(const c of s){if(!await(0,n.d9)(this.contractWrapper.getProvider(),this.getAddress(),c.contractAddress,c.tokenId,d))throw new Error(`ERC721 token "${c.tokenId}" with contract address "${c.contractAddress}" is not approved for transfer.\n\nYou can give approval the multiwrap contract to transfer this token by running:\n\nawait sdk.getNFTCollection("${c.contractAddress}").setApprovalForToken("${this.getAddress()}", ${c.tokenId});\n\n`);r.push("1"),e.push({assetContract:c.contractAddress,tokenType:1,totalAmount:1,tokenId:c.tokenId})}for(const p of o){if(!await(0,n.d9)(this.contractWrapper.getProvider(),this.getAddress(),p.contractAddress,p.tokenId,d))throw new Error(`ERC1155 token "${p.tokenId}" with contract address "${p.contractAddress}" is not approved for transfer.\n\nYou can give approval the multiwrap contract to transfer this token by running:\n\nawait sdk.getEdition("${p.contractAddress}").setApprovalForAll("${this.getAddress()}", true);\n\n`);r.push(p.totalRewards),e.push({assetContract:p.contractAddress,tokenType:2,totalAmount:c.O$.from(p.quantityPerReward).mul(c.O$.from(p.totalRewards)),tokenId:p.tokenId})}return{contents:e,numOfRewardUnits:r}}async prepare(t,e,r){return n.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:e,overrides:r})}async call(t,e,r){return this.contractWrapper.call(t,e,r)}detectVrf(){if((0,n.c1)(this.contractWrapper,"PackVRF"))return new C(this.contractWrapper.getSignerOrProvider(),this.contractWrapper.readContract.address,this.storage,this.contractWrapper.options,this.chainId)}}(0,a._)(P,"contractRoles",n.dF)}}]);